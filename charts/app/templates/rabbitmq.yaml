apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.rabbitmq.namespace }}
  labels:
    type: system
    dockerpublic: okay
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: rabbitmq-credentials
  namespace: {{ .Values.rabbitmq.namespace }}
spec:
  secretStoreRefs:
    - name: {{ .Values.secretStore.readWriteStore }}
      kind: SecretStore
  selector:
    secret:
      name: rabbitmq-credentials
  template:
    data:
      password: "{{ `{{ .password }}` }}"
      username: user
      hostname: {{ .Values.rabbitmq.releaseName }}-headless.{{ .Values.rabbitmq.namespace }}.svc.cluster.local
      url: "amqp://user:{{ `{{ .password }}` }}@{{ .Values.rabbitmq.releaseName }}-headless.{{ .Values.rabbitmq.namespace }}.svc.cluster.local"
  data:
    - match:
        secretKey: password
        remoteRef:
          remoteKey: rabbitmq
          property: password
    - match:
        secretKey: username
        remoteRef:
          remoteKey: rabbitmq
          property: username
    - match:
        secretKey: hostname
        remoteRef:
          remoteKey: rabbitmq
          property: hostname
    - match:
        secretKey: url
        remoteRef:
          remoteKey: rabbitmq
          property: url
    - match:
        secretKey: url
        remoteRef:
          remoteKey: rabbitmq
          property: BUS_URL
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rabbitmq-credentials
  namespace: {{ .Values.rabbitmq.namespace }}
spec:
  secretStoreRef:
    name: {{ .Values.rabbitmq.secretstore }}
    kind: SecretStore
  target:
    name: rabbitmq-credentials
  data:
    - secretKey: rabbitmq-erlang-cookie
      remoteRef:
        key: RABBITMQ
        property: rabbitmq-erlang-cookie
    - secretKey: rabbitmq-password
      remoteRef:
        key: RABBITMQ
        property:  rabbitmq-password
    - secretKey: password
      remoteRef:
        key: RABBITMQ
        property: rabbitmq-password
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ include "app.fullname" . }}-rabbitmq
  labels:
    {{- include "app.labels" . | nindent 4 }}
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  syncPolicy:
    syncOptions:
      - ServerSideApply=true
  destination:
    namespace: {{ .Values.rabbitmq.namespace }}
    server: {{ .Values.spec.destination.server }}
  project: {{ .Values.spec.project }}
  source:
    chart: rabbitmq
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: {{ .Values.rabbitmq.version }}
    helm:
      releaseName: {{ .Values.rabbitmq.releaseName }}
      values: |-
        fullnameOverride: {{ .Values.rabbitmq.releaseName }}
        replicaCount: {{ .Values.rabbitmq.replicaCount }}

        image:
          pullSecrets:
            - name: cluster-docker-public

        auth:
          username: user
          existingPasswordSecret: rabbitmq-credentials
          existingErlangSecret: rabbitmq-credentials

        clustering:
          rebalance: true

        persistentVolumeClaimRetentionPolicy:
          whenDeleted: Delete

        resources:
          {{- toYaml .Values.rabbitmq.resources | nindent 10 }}

        serviceAccount:
          create: false

        networkPolicy:
          enabled: false

        persistence:
          storageClass: {{ .Values.rabbitmq.storageClass }}
        persistentVolumeClaimRetentionPolicy:
          whenDeleted: Delete

        ingress:
          enabled: true
          hostname: rabbitmq.k8s.private
          ingressClassName: nginx
        
        ulimitNofiles: ""